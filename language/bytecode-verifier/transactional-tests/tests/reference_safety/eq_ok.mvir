//# publish --address 0x1

// testing valid usages of == and != over references
module Tester {
    eqtest1() {
        let x: u64;
        let r: &mut u64;

        x = 0;
        r = &mut x;
        _ = freeze(copy(r)) == freeze(copy(r));
        return;
    }

    eqtest2() {
        let x: u64;
        let r: &mut u64;

        x = 0;
        r = &mut x;
        _ = freeze(copy(r)) == freeze(move(r));
        return;
    }

    neqtest1() {
        let x: u64;
        let r: &mut u64;

        x = 0;
        r = &mut x;
        _ = freeze(copy(r)) != freeze(copy(r));
        return;
    }

    neqtest2() {
        let x: u64;
        let r: &mut u64;

        x = 0;
        r = &mut x;
        _ = freeze(copy(r)) != freeze(move(r));
        return;
    }

    mut_eqtest1() {
        let x: u64;
        let r: &mut u64;

        x = 0;
        r = &mut x;
        // invalid read of mutable ref, does not currently own its data
        _ = copy(r) == copy(r);
        return;
    }

    mut_eqtest2() {
        let x: u64;
        let r: &mut u64;

        x = 0;
        r = &mut x;
        // invalid read of mutable ref, does not currently own its data
        _ = copy(r) == move(r);
        return;
    }

    mut_neqtest1() {
        let x: u64;
        let r: &mut u64;

        x = 0;
        r = &mut x;
        // invalid read of mutable ref, does not currently own its data
        _ = copy(r) != copy(r);
        return;
    }

    mut_neqtest2() {
        let x: u64;
        let r: &mut u64;

        x = 0;
        r = &mut x;
        // invalid read of mutable ref, does not currently own its data
        _ = copy(r) != move(r);
        return;
    }
}
